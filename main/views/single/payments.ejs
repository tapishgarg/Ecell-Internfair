<!DOCTYPE html>
<html>
<head>
    <meta charset=utf-8>
    <meta name=description content="Joeydash is chilling in aerospace">
    <meta name=author content=joeydash>
    <meta name=mobile-web-app-capable content=yes>
    <meta name=viewport content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/alasql/0.3/alasql.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.7.12/xlsx.core.min.js"></script>

    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>


    <style>
        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        td, th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #dddddd;
        }

        /* Add a black background color to the top navigation bar */
        .topnav {
            overflow: hidden;
            background-color: #e9e9e9;
        }

        /* Style the links inside the navigation bar */
        .topnav a {
            float: left;
            display: block;
            color: black;
            text-align: center;
            padding: 14px 16px;
            text-decoration: none;
            font-size: 17px;
        }

        /* Change the color of links on hover */
        .topnav a:hover {
            background-color: #ddd;
            color: black;
        }

        /* Style the "active" element to highlight the current page */
        .topnav a.active {
            background-color: #2196F3;
            color: white;
        }

        /* Style the search box inside the navigation bar */
        .topnav input[type=text] {
            float: right;
            padding: 6px;
            border: none;
            margin-top: 8px;
            margin-right: 16px;
            font-size: 17px;
        }

        /* When the screen is less than 600px wide, stack the links and the search field vertically instead of horizontally */
        @media screen and (max-width: 600px) {
            .topnav a, .topnav input[type=text] {
                float: none;
                display: block;
                text-align: left;
                width: 100%;
                margin: 0;
                padding: 14px;
            }

            .topnav input[type=text] {
                border: 1px solid #ccc;
            }
        }
    </style>
</head>
<body>
<div id="app">
    <div class="topnav" style="margin-bottom: 20px;">
        <a class="active"><b>Payment List</b></a>
        <a> {{search_list.length}} Rows</a>
        <a style="cursor: pointer;" onclick="saveFile()"> Download XLSX</a>
        <input type="text" @keyup="search_object" placeholder="search payment id" v-model="search_str">
    </div>

    <table v-if="checkedTickets.length>0">
        <tr>
            <th v-for="key in Object.keys(checkedTickets[0])">{{make_head(key)}}</th>
            <!--<th>Contact</th>-->
            <!--<th>Country</th>-->
        </tr>
        <tr v-for="ticket in search_list">
            <td v-for="key in Object.keys(checkedTickets[0])">{{ticket[key]}}</td>
        </tr>

    </table>

</div>

<script>


    let app = new Vue({
        el: '#app',
        data: {
            search_str: '',
            checkedTickets: [],
            search_list: []
        },
        methods: {
            getCheckTickets: () => {
                axios.get('/payment/paid/list/json')
                    .then(function (response) {
                        // handle success
                        app.checkedTickets = JSON.parse(response.data).payments.filter(function (obj) {
                            return obj.status !== "Failed";
                        });
                        app.search_list = app.checkedTickets;
                    })
                    .catch(function (error) {
                        // handle error
                        console.log(error);
                    })
                    .then(function () {
                        // always executed
                    });
            },
            setRefreshTimer: () => {
                setInterval(function () {
                    app.getCheckTickets();
                }, 3000);
            },
            make_head: function (str) {
                let splitStr = str.toLowerCase().split('_');
                for (let i = 0; i < splitStr.length; i++) {
                    // You do not need to check if i is larger than splitStr length, as your for does that for you
                    // Assign it back to the array
                    splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);
                }
                // Directly return the joined string
                return splitStr.join(' ');
            },
            search_object: () => {
                if (app.search_str.length > 0) {
                    app.search_list = app.checkedTickets.filter(function (obj) {
                        return matchRuleShort(obj.payment_id.toLowerCase(), "*" + app.search_str.toLowerCase() + "*");
                    })
                } else {
                    app.search_list = app.checkedTickets;
                }
            },
            download_xlsx: () => {
                var data1 = [{a: 1, b: 10}, {a: 2, b: 20}];
                var opts = [{sheetid: 'One', header: true}];
                var res = alasql('SELECT * INTO XLSX("restest344b.xlsx",?) FROM ?',
                    [opts, [data1]]);
            }
        },
        mounted: function () {
            this.$nextTick(function () {
                this.getCheckTickets();
                // this.setRefreshTimer();
            })
        }
    });

    //Short code
    function matchRuleShort(str, rule) {
        return new RegExp("^" + rule.split("*").join(".*") + "$").test(str);
    }

    //Explanation code
    function matchRuleExpl(str, rule) {
        // "."  => Find a single character, except newline or line terminator
        // ".*" => Matches any string that contains zero or more characters
        rule = rule.split("*").join(".*");

        // "^"  => Matches any string with the following at the beginning of it
        // "$"  => Matches any string with that in front at the end of it
        rule = "^" + rule + "$";

        //Create a regular expression object for matching string
        var regex = new RegExp(rule);

        //Returns true if it finds a match, otherwise it returns false
        return regex.test(str);
    }

    window.saveFile = function saveFile() {
        var data1 = app.search_list;
        var opts = [{sheetid: 'One', header: true}];
        var res = alasql('SELECT * INTO XLSX("restest344b.xlsx",?) FROM ?',
            [opts, [data1]]);
    }


</script>
</body>
</html>