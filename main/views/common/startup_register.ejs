<style>
    .hide {
        display: none;
    }
</style>

<div class="account-popup-area signup-popup-box" id="startup_register_fragment">
    <div class="account-popup">
        <span class="close-popup"><i class="la la-close"></i></span>
        <div v-bind:class="{ hide: user_details.is_signed_in}">
            <div class="g-signin2" data-onsuccess="onSignIn" style="display: flex; justify-content: center;"></div>

        </div>

        <div v-if="!is_registered" v-bind:class="{ hide: !user_details.is_signed_in}">
            <form>
                <div class="cfield">
                    <input type="text" placeholder="Startup Name" v-model="startup_details.startup_name"/>
                    <!-- <i class="la la-user"></i> -->
                </div>

                <div class="cfield">
                    <textarea style="margin-bottom: 20px; font-size: 13px;" placeholder="About the Startup"
                              v-model="startup_details.about" rows="1" cols="1"></textarea>
                    <!-- <i class="la la-user"></i> -->
                </div>
                <br>
                <div class="cfield">
                    <input type="text" placeholder="PoC Name" v-model="startup_details.poc_name"/>
                    <!-- <i class="la la-user"></i> -->
                </div>
                <div class="cfield">
                    <input type="text" placeholder="Contact No." v-model="startup_details.contact_number"/>
                    <!-- <i class="la la-user"></i> -->
                </div>
                <div class="cfield">
                    <input type="text" placeholder="emailil Id" v-model="startup_details.email_id"/>
                    <!-- <i class="la la-user"></i> -->
                </div>

                <div class="cfield">
                    <input type="text" placeholder="Website" v-model="startup_details.website"/>
                    <!-- <i class="la la-user"></i> -->
                </div>
                <div class="cfield">
                    <input type="text" placeholder="Logo URL" v-model="startup_details.logo"/>
                    <!-- <i class="la la-user"></i> -->
                </div>

            </form>

            <button @click="save_startup_details" style="cursor: pointer;background: #0b1b46; color: white;"> Register
            </button>
        </div>


        <div v-if="is_registered">
            <h5 style="color: green">Thank You For Registering!</a>
            </h5>
            <p v-if="!is_verified">

                Please wait while we verify your startup<br>
                Its okay even I am exited too
            </p>
            <p v-if="is_verified">

                Go to your <a href="/startup/manage">Dashboard</a>
            </p>
        </div>
    </div>
</div><!-- SIGNUP POPUP -->


<script>

    let startup_register_fragment = new Vue({
        el: '#startup_register_fragment',
        data: {
            is_registered: false,
            is_verified: false,
            user_details: {
                is_signed_in: false,
                name: "",
                image_url: "",
                email: ""
            },
            startup_details: {
                startup_name: "",
                about: "",
                website: "",
                logo: "",
                poc_name: "",
                contact_number: "",
                email_id: ""
            }
        },
        methods: {
            check_is_registered: () => {
                let reqBody = {
                    query_string: '{\n' +
                        '  user_detail(where: {user_h_id: {_eq: "' + JSON.parse(Cookies.get('auth_details')).h_id + '"}}) {\n' +
                        '    startupDetailsBystartupId {\n' +
                        '      id\n' +
                        '      startup_name\n' +
                        '      is_verified\n' +
                        '    }\n' +
                        '  }\n' +
                        '}\n'
                };
                axios.post('/db/user', reqBody)
                    .then(function (response) {
                        if (response.data.data !== undefined) {
                            console.log(JSON.stringify(response.data.data));
                            if (response.data.data.user_detail[0].startupDetailsBystartupId !== null) {
                                startup_register_fragment.is_registered = true;
                                Cookies.set('startup_details', JSON.stringify(response.data.data.user_detail[0].startupDetailsBystartupId));
                                navigation_app.set_startup_registered();
                                navigation_app.check_is_verified();
                            } else {
                                startup_register_fragment.is_registered = false;
                                Cookies.remove('startup_details');
                            }
                        } else {

                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            save_startup_details: () => {
                if (startup_register_fragment.startup_details.startup_name === "" || startup_register_fragment.startup_details.startup_name === undefined) {
                    alert("ill startup name!");
                } else if (startup_register_fragment.startup_details.about === "" || startup_register_fragment.startup_details.about === undefined) {
                    alert("fill startup details!");
                } else if (Cookies.get('auth_details') === undefined || Cookies.get('auth_details') === null) {
                    alert("Sign in please!");
                } else {
                    if (confirm("You can't change your data later on so make sure all the data entered here are correct and properly filled")) {
                        let reqBody = {
                            query_string: 'mutation save_startup_details {\n' +
                                '  insert_startup_details(objects: [{startup_name: "' + startup_register_fragment.startup_details.startup_name + '", about: "' + startup_register_fragment.startup_details.about + '", website: "' + startup_register_fragment.startup_details.website + '", logo_url: "' + startup_register_fragment.startup_details.logo + '", poc_name: "' + startup_register_fragment.startup_details.poc_name + '", contact_number: "' + startup_register_fragment.startup_details.contact_number + '", email_id: "' + startup_register_fragment.startup_details.email_id + '", user_h_id: "' + JSON.parse(Cookies.get('auth_details')).h_id + '"}]) {\n' +
                                '    returning {\n' +
                                '      id\n' +
                                '      is_verified\n' +
                                '    }\n' +
                                '  }\n' +
                                '}\n'
                        };

                        axios.post('/db/user', reqBody)
                            .then(function (response) {
                                if (response.data.errors === undefined) {
                                    navigation_app.is_verified = response.data.data.insert_startup_details.returning[0].is_verified;
                                    let reqBody2 = {
                                        query_string: 'mutation save_startup_name {\n' +
                                            '  update_user_detail(where: {user_h_id: {_eq: "' + JSON.parse(Cookies.get('auth_details')).h_id + '"}}, _set: {startup_id: ' + response.data.data.insert_startup_details.returning[0].id + '}) {\n' +
                                            '    affected_rows\n' +
                                            '  }\n' +
                                            '}\n'
                                    };
                                    axios.post('/db/user', reqBody2)
                                        .then(function (response) {
                                            if (response.data.errors === undefined) {
                                                startup_register_fragment.is_registered = true;
                                                navigation_app.set_startup_registered();
                                                if (navigation_app.is_verified === true) {
                                                    startup_register_fragment.is_verified = true;
                                                    //Todo you must store cookie before redirecting
                                                    // location.href = "/startup/manage";
                                                }
                                            } else {

                                            }
                                        })
                                        .catch(function (error) {
                                            console.log(error);
                                        });


                                } else if (response.data.errors !== undefined && response.data.errors[0].message !== undefined && response.data.errors[0].extensions.code === "constraint-violation") {
                                    console.log("error");
                                    alert("Startup already registered with different account");
                                } else {
                                    console.log("random error:\n");
                                    console.log(JSON.stringify(response.data));
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    } else {

                    }


                }
            }
        }, mounted: function () {
            this.$nextTick(function () {
            })
        }
    });


</script>