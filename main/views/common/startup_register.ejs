<style>
    .hide {
        display: none;
    }
</style>

<div class="account-popup-area signup-popup-box" id="signupApp">
    <div class="account-popup">
        <span class="close-popup"><i class="la la-close"></i></span>
        <div v-bind:class="{ hide: user_details.is_signed_in}">
            <div class="g-signin2" data-onsuccess="onSignIn" style="display: flex; justify-content: center;"></div>

        </div>

        <div v-if="!is_registered" v-bind:class="{ hide: !user_details.is_signed_in}">
            <form>
                <div class="cfield">
                    <input type="text" placeholder="Startup Name" v-model="startup_details.startup_name"/>
                    <!-- <i class="la la-user"></i> -->
                </div>

                <div class="cfield">
                    <textarea style="margin-bottom: 20px; font-size: 13px;" placeholder="About the Startup"
                              v-model="startup_details.about" rows="1" cols="1"></textarea>
                    <!-- <i class="la la-user"></i> -->
                </div>
                <br>
                <div class="cfield">
                    <input type="text" placeholder="PoC Name" v-model="startup_details.poc_name"/>
                    <!-- <i class="la la-user"></i> -->
                </div>
                <div class="cfield">
                    <input type="text" placeholder="Contact No." v-model="startup_details.contact_number"/>
                    <!-- <i class="la la-user"></i> -->
                </div>
                <div class="cfield">
                    <input type="text" placeholder="emailil Id" v-model="startup_details.email_id"/>
                    <!-- <i class="la la-user"></i> -->
                </div>

                <div class="cfield">
                    <input type="text" placeholder="Website" v-model="startup_details.website"/>
                    <!-- <i class="la la-user"></i> -->
                </div>
                <div class="cfield">
                    <input type="text" placeholder="Logo URL" v-model="startup_details.logo"/>
                    <!-- <i class="la la-user"></i> -->
                </div>

            </form>

            <button @click="save_startup_details" style="cursor: pointer;background: #0b1b46; color: white;"> Register
            </button>
        </div>


        <div v-if="is_registered">
            <h5 style="color: green"><a style="color: #0b1b46;" href="/startup/manage">Thank You For Registering!<i
                            class="fas fa-link"></i></a>
            </h5>
            <p>
                Thank You For Registering!
            </p>
        </div>
    </div>
</div><!-- SIGNUP POPUP -->


<script>

    let signupApp = new Vue({
        el: '#signupApp',
        data: {
            is_registered: false,
            user_details: {
                is_signed_in: false,
                name: "",
                image_url: "",
                email: ""
            },
            startup_details: {
                startup_name: "",
                about: "",
                website: "",
                logo: "",
                poc_name: "",
                contact_number: "",
                email_id: ""
            }
        },
        methods: {
            check_is_registered: () => {
                let reqBody = {
                    query_string: '{\n' +
                        '  user_detail(where: {user_h_id: {_eq: "' + JSON.parse(Cookies.get('auth_details')).h_id + '"}}) {\n' +
                        '    startupDetailsBystartupId {\n' +
                        '      id\n' +
                        '      startup_name\n' +
                        '      is_verified\n' +
                        '    }\n' +
                        '  }\n' +
                        '}\n'
                };
                axios.post('/db/user', reqBody)
                    .then(function (response) {
                        if (response.data.data !== undefined) {
                            console.log(JSON.stringify(response.data.data));
                            if (response.data.data.user_detail[0].startupDetailsBystartupId !== null) {
                                signupApp.is_registered = true;
                                Cookies.set('startup_details', JSON.stringify(response.data.data.user_detail[0].startupDetailsBystartupId));
                                navigation_app.check_is_verified();
                            } else {
                                signupApp.is_registered = false;
                                Cookies.set('startup_details', JSON.stringify({is_verified: false}));
                                // navigation_app.check_is_verified();

                            }
                        } else {

                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            save_startup_details: () => {
                if (signupApp.startup_details.startup_name === "" || signupApp.startup_details.startup_name === undefined) {
                    alertify.error("fill startup name!");
                } else if (signupApp.startup_details.about === "" || signupApp.startup_details.about === undefined) {
                    alertify.error("fill startup details!");
                } else if (Cookies.get('auth_details') === undefined || Cookies.get('auth_details') === null) {
                    alertify.error("Sign in please!");
                } else {
                    alertify.confirm("You can't change your data later on so make sure all the data entered here are correct and properly filled",
                        function () {
                            let reqBody = {
                                query_string: 'mutation save_startup_details {\n' +
                                    '  insert_startup_details(objects: [{startup_name: "' + signupApp.startup_details.startup_name + '", about: "' + signupApp.startup_details.about + '", website: "' + signupApp.startup_details.website + '", logo_url: "' + signupApp.startup_details.logo + '", poc_name: "' + signupApp.startup_details.poc_name + '", contact_number: "' + signupApp.startup_details.contact_number + '", email_id: "' + signupApp.startup_details.email_id + '", user_h_id: "' + JSON.parse(Cookies.get('auth_details')).h_id + '"}]) {\n' +
                                    '    returning {\n' +
                                    '      id\n' +
                                    '      is_verified\n' +
                                    '    }\n' +
                                    '  }\n' +
                                    '}\n'
                            };

                            axios.post('/db/user', reqBody)
                                .then(function (response) {
                                    if (response.data.errors === undefined) {
                                        console.log(response.data.data.insert_startup_details.returning[0].is_verified);

                                        navigation_app.is_verified = response.data.data.insert_startup_details.returning[0].is_verified;

                                        let reqBody2 = {
                                            query_string: 'mutation save_startup_name {\n' +
                                                '  update_user_detail(where: {user_h_id: {_eq: "' + JSON.parse(Cookies.get('auth_details')).h_id + '"}}, _set: {startup_id: ' + response.data.data.insert_startup_details.returning[0].id + '}) {\n' +
                                                '    affected_rows\n' +
                                                '  }\n' +
                                                '}\n'
                                        };

                                        axios.post('/db/user', reqBody2)
                                            .then(function (response) {
                                                if (response.data.errors === undefined) {
                                                    signupApp.is_registered = true;
                                                } else {

                                                }
                                            })
                                            .catch(function (error) {
                                                console.log(error);
                                            });


                                    } else if (response.data.errors !== undefined && response.data.errors[0].message !== undefined && response.data.errors[0].extensions.code === "constraint-violation") {
                                        console.log("error");
                                        alertify.error("Startup already registered with different account");
                                    } else {
                                        console.log("random error:\n");
                                        console.log(JSON.stringify(response.data));
                                    }
                                })
                                .catch(function (error) {
                                    console.log(error);
                                });

                        },
                        function () {
                        }).setHeader('<em> Ecell says </em> ');


                }
            },
            check_is_signed_in: () => {
                console.log(signupApp.user_details.is_signed_in);
                navigation_app.is_signed_in = signupApp.user_details.is_signed_in;
            }
        }, mounted: function () {
            this.$nextTick(function () {
                this.check_is_signed_in();

            })
        }
    });


    function onSignIn(googleUser) {
        let profile = googleUser.getBasicProfile();
        signupApp.user_details = {
            is_signed_in: true,
            name: profile.getName(),
            image_url: profile.getImageUrl(),
            email: profile.getEmail()
        };
        let user_details = signupApp.user_details;
        Cookies.set('user_details', JSON.stringify(user_details));
        let reqBody = {
            id_token: googleUser.getAuthResponse().id_token,
        };
        axios.post('/db/sign_in', reqBody)
            .then(function (response) {
                if (response.data.data !== undefined) {
                    Cookies.set('auth_details', JSON.stringify(response.data.data.insert_joey_user.returning[0]));
                    let reqBody = {
                        query_string: 'mutation {\n' +
                            '  insert_user_detail(objects: [{name: "' + profile.getName() + '", email: "' + profile.getEmail() + '", image_url: "' + profile.getImageUrl() + '", user_h_id: "' + response.data.data.insert_joey_user.returning[0].h_id + '"}], on_conflict: {constraint: user_detail_user_h_id_key, update_columns: [name, email, image_url]}) {\n' +
                            '    affected_rows\n' +
                            '  }\n' +
                            '}'
                    };
                    axios.post('/db/user', reqBody)
                        .then(function (response) {
                            if (response.data.data !== undefined) {
                                signupApp.check_is_registered();
                                navigation_app.is_signed_in = true;
                            } else {
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                } else {
                    console.log(response.data);
                }
            })
            .catch(function (error) {
                console.log(error);
            });
    }

    function signOut() {
        Cookies.remove('user_details');
        Cookies.remove('auth_details');
        let auth2 = gapi.auth2.getAuthInstance();
        auth2.signOut().then(function () {
            signupApp.user_details.is_signed_in = false;
        });
        location.href = "/";
    }


</script>